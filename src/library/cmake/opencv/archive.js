// we have three shells now, UCRT64 is the default and overarching environment shell. download all pacman packages from there.
// use MINGW64 shell to run builds with ninja and cmake. MSYS shell is available at C:/msys64/msys2.exe
// config files for each shell can be found at the msys64's root.

// use ninja with msys2's ucrt64 clang compilers: THIS WORKS FROM POWERSHELL
// for native x86/ARM, use just cmake ... this is the only thing necessary for building .a files
// NOTE: mingw64 shell requires you cd into the c drive, using $ cd /c/Users/natha/Desktop/statics/opencv/static_build
// in ucrt64: PATHS / MUST BE FLIPPED : $PATH is inherited from the Windows Env Vars...
// VIA UCRT64 TERMINAL - `which gcc` / `which g++`
// all compilers for clang (gcc, g++, etc.) are located at C:/msys64/ucrt64/bin/gcc.exe or C:/msys64/ucrt64/bin/g++.exe
// cmake -G Ninja -S C:/Users/natha/Desktop/statics/opencv -B C:/Users/natha/Desktop/statics/opencv/static_build -D BUILD_SHARED_LIBS=OFF -D CMAKE_MAKE_PROGRAM=C:/ninja-win/ninja.exe -D CMAKE_C_COMPILER=C:/msys64/ucrt64/bin/gcc.exe -D CMAKE_CXX_COMPILER=C:/msys64/ucrt64/bin/g++.exe

// emcmake cmake - THIS IS NECESSARY TO USE OpenCV with WASM
// to include the install directory to properly generate headers, libs and other objs.
// Also disable the build of unnecessary modules and tests.
// emcmake cmake -G Ninja -S C:/Users/natha/Desktop/statics/opencv -B C:/Users/natha/Desktop/statics/opencv/static_build -D BUILD_SHARED_LIBS=OFF -D CMAKE_C_COMPILER=C:/Users/natha/emsdk/upstream/emscripten/emcc -D CMAKE_CXX_COMPILER=C:/Users/natha/emsdk/upstream/emscripten/em++ -D CMAKE_MAKE_PROGRAM=C:/ninja-win/ninja.exe -D BUILD_ZLIB=ON
// https://stackoverflow.com/questions/67273235/using-ninja-as-a-generator-with-msys2-mingw-on-windows-10-x64

// OFFICIAL EMSCRIPTEN BUILD COMMAND ******************************************************************************************************
/*
# Run emconfigure with the normal configure command as an argument.
emconfigure ./configure

ensure emcmake knows where to find the emscripten toolchain,

-emconfigure
-em++
-emcc
-emmake
-emcmake

# Fetch the latest version of the emsdk (not needed the first time you clone)
git pull

# Download and install the latest SDK tools.
./emsdk install latest

# Make the "latest" SDK "active" for the current user. (writes .emscripten file)
emsdk list
emsdk install 3.0.0
emsdk activate 3.0.0 / latest

# Activate PATH and other environment variables in the current terminal
source ./emsdk_env.sh

On Windows, run emsdk.bat instead of ./emsdk, and emsdk_env.bat instead of source ./emsdk_env.sh.

Can be beneficial to set the env vars in the shell using emconfigure, or pass full paths.

# Run emmake with the normal make to generate Wasm object files.
emmake make

# Compile the linked code generated by make to JavaScript + WebAssembly.
# 'project.o' should be replaced with the make output for your project, and
# you may need to rename it if it isn't something emcc recognizes
# (for example, it might have a different suffix like 'project.so' or
# 'project.so.1', or no suffix like just 'project' for an executable).
# If the project output is a library, you may need to add your 'main.c' file
# here as well.
# [-Ox] represents build optimisations (discussed in the next section).
emcc [-Ox] project.o -o project.js
*/

// ******FULL COMMAND********

// full list of cmake options: https://docs.opencv.org/4.x/db/d05/tutorial_config_reference.html

// **********
// imgproc only ✅
// core, imgproc ✅
// core, imgproc, videoio ✅
// -DBUILD_LIST=core,imgproc,videoio (imgcodec)

// *** NEW BUILD COMMAND  ***

// emcmake cmake -G Ninja -S C:/Users/natha/Desktop/statics/opencv -B C:/Users/natha/Desktop/statics/opencv/static_build -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_COMPILER=C:/Users/natha/emsdk/upstream/emscripten/emcc -DCMAKE_CXX_COMPILER=C:/Users/natha/emsdk/upstream/emscripten/em++ -DCMAKE_MAKE_PROGRAM=C:/ninja-win/ninja.exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:/Users/natha/Desktop/statics/opencv/static_build/install -DBUILD_SHARED_LIBS=OFF -DBUILD_LIST=core,imgproc,videoio -DENABLE_PIC=ON -DWITH_ZLIB=ON -DWITH_IPP=OFF -DBUILD_ITT=OFF -DBUILD_IPP_IW=OFF -DWITH_ITT=OFF -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF -DWITH_WEBNN=OFF -DBUILD_EXAMPLES=OFF -DWITH_CUDA=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF

// Once configured, build OpenCV using emmake with make to generate the libraries.

// cd to static_builds, mkdir install folder, then run the following command:

// emmake ninja install

/*
// see https://docs.opencv.org/4.x/db/d05/tutorial_config_reference.html#tutorial_config_reference_func_core

// https://github.com/opencv/opencv/issues/20313


*/

/*
error in make process - wasm data structure keywording - both 4.x and 3.4

opting into simd support is support important and will likely affect performance...

``` -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF -DWITH_WEBNN=OFF ```

SUPPORTED SIMD OPERATIONS : https://emscripten.org/docs/porting/simd.html
// https://emscripten.org/docs/porting/simd.html#compiling-simd-code-targeting-x86-sse-instruction-sets
// Compile existing SIMD code that uses the x86 SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 or AVX intrinsics (#include <*mmintrin.h>)

Disable simd optimizations in the build process - -D CV_ENABLE_INTRINSICS=OFF -D BUILD_WASM_INTRIN_TESTS=OFF -D WITH_WEBNN=ON -D WITH_PTHREADS_PF=OFF

opencv/modules/core/include\opencv2/core/hal/intrin_wasm.hpp:2088:18: warning: 'wasm_v8x16_shuffle' is deprecated: use 'wasm_i8x16_shuffle' instead [-W#pragma-messages]
 2088 |     v128_t t10 = wasm_v8x16_shuffle(t00, t01, 0,1,2,3,12,13,14,15,24,25,26,27,4,5,6,7);
      |                  ^

opencv/modules/core/include\opencv2/core/haintrin_wasm.hpp:2728:22: warning: 'wasm_v8x16_shuffle' is deprecated: use asm_i8x16_shuffle' instead [-W#pragma-messages]
 2728 |     return v_int16x8(wasm_v8x16_shuffle(vec.val, vec.val, 0,1,2,3,5,8,9,10,11,12,13,14,15,6,7));
      |                      ^
emsdk\upstream\lib\clang\20\include\wasm_simd128.h:1746:3: te: expanded from macro 'wasm_v8x16_shuffle'
 1746 |   __DEPRECATED_WASM_MACRO("wasm_v8x16_shuffle", "wasm_i8x16_shuffl)          \
      |   ^
emsdk\upstream\lib\clang\20\include\wasm_simd128.h:1687:3: te: expanded from macro '__DEPRECATED_WASM_MACRO'
 1687 |   _Pragma(__WASM_STR(GCC warning(                                            \
      |   ^
<scratch space>:3:6: note: expanded from here
    3 |  GCC warning( "'" "wasm_v8x16_shuffle" "' is deprecated: use '" "wm_i8x16_shuffle" "' instead")
      |      ^
*/

/* FROM opencv/platforms/js/build_js.py dir

Building OpenCV.js by Emscripten
====================

https://docs.opencv.org/4.x/d4/da1/tutorial_js_setup.html

Execute `build_js.py` script:
```
emcmake python <opencv_src_dir>/platforms/js/build_js.py <build_dir>
```

If everything is fine, a few minutes later you will get `<build_dir>/bin/opencv.js`. You can add this into your web pages.

Find out more build options by `-h` switch.

For detailed build tutorial, check out `<opencv_src_dir>/doc/js_tutorials/js_setup/js_setup/js_setup.markdown`.

emcmake python C:/Users/natha/Desktop/statics/opencv/platforms/js/build_js.py build_js --opencv_dir C:/Users/natha/Desktop/statics/opencv --cmake_option -DCMAKE_TOOLCHAIN_FILE=C:/Users/natha/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

python C:/Users/natha/Desktop/statics/opencv/platforms/js/build_js.py build_js --opencv_dir C:/Users/natha/Desktop/statics/opencv --emscripten_dir C:/Users/natha/emsdk/upstream/emscripten --build_loader

make suffers from 'no rule' after no output from build.
emcmake prefix suffers from generator clause being picked up as unrecognized argument

emcmake cmake -G Ninja -S statics/opencv -B statics/opencv/static_build -D BUILD_SHARED_LIBS=OFF -D CMAKE_C_COMPILER=C:/Users/natha/emsdk/upstream/emscripten/emcc -D CMAKE_CXX_COMPILER=C:/Users/natha/emsdk/upstream/emscripten/em++ -D CMAKE_MAKE_PROGRAM=C:/ninja-win/ninja.exe -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=statics/opencv/static_build/install -D BUILD_SHARED_LIBS=OFF -D BUILD_opencv_gapi=OFF -D WITH_IPP=OFF -D BUILD_opencv_dnn=OFF -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF -D WITH_1394=OFF -D WITH_CUDA=OFF -D WITH_FFMPEG=OFF -D WITH_GSTREAMER=OFF -D WITH_GTK=OFF -D WITH_JPEG=OFF -D WITH_PNG=OFF -D WITH_TIFF=OFF -D WITH_WEBP=OFF -D WITH_OPENCL=OFF -D WITH_OPENGL=OFF -D WITH_QT=OFF -D WITH_VTK=OFF -D WITH_LAPACK=OFF -D BUILD_opencv_videoio=OFF -D BUILD_opencv_highgui=OFF -D BUILD_opencv_ml=OFF -D BUILD_opencv_photo=OFF -D BUILD_opencv_video=OFF -D BUILD_opencv_calib3d=OFF -D BUILD_opencv_features2d=OFF -D BUILD_opencv_flann=OFF -D BUILD_opencv_objdetect=OFF -D WITH_ITT=OFF -D WITH_JPEG2000=OFF -D ENABLE_PIC=OFF -D WITH_ZLIB=ON >> buildoutput.txt

Emscripten 2.0.10 is verified for OpenCV

*/
